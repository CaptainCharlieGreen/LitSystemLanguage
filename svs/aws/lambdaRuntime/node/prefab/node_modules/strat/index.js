const config = require('./config.json');
const getTransport = require('./invocations/transport');
const scopes = config.scopes;
const defaultFunction = config.defaultFunction;
const defaultScope = config.defaultScope;
const stackTrace = require('stack-trace');

const failures = [
  'componentRejection',
  'componentFailure',
  'serviceRejection',
  'serviceFailure'
];

module.exports = function (functionName) {
  const resolvedFunction = functionName || defaultFunction;

  if (typeof resolvedFunction !== 'string' || resolvedFunction.length === 0) {
    throw "Pass an absolute function name into Strat. Ex: Strat('Books.getBooks')";;
  }

  const trace = stackTrace.get();
  const callingFile = trace[1].getFileName();
  //files will end in ${artifact.name}/index.js
  const fileNameTokens = callingFile.split('/');
  var currentScope = defaultScope;
  if (fileNameTokens[fileNameTokens.length - 1] !== 'strat_generated_host_entry.js') {
    const artifactName = fileNameTokens[fileNameTokens.length - 2];
    currentScope = artifactName.split('.')[0];
  }

  if (scopes[currentScope] === undefined) {
    throw `Could not resolve scope for ${currentScope}.`;
  }
  const resolution = scopes[currentScope][resolvedFunction];
  if (resolution === undefined) {
    throw `${resolvedFunction} is not defined in the scope ${currentScope}.`;
  }

  const transport = getTransport(
    resolution.service,
    resolution.config);
  
  if (functionName === undefined || functionName === defaultFunction) {
    return transport;
  }
  //todo: compose this
  return wrapTransport(resolvedFunction, transport);
}

function wrapTransport (functionName, transport) {
  return function (arg) {
    return transport({
        _stratCallee: functionName,
        data: arg
      })
      .then(result => {
        const failure = failures
          .filter(failure => result[failure] !== undefined)
          .map(failure => result[failure])
          [0];
        return failure !== undefined
          ? Promise.reject(failure)
          : Promise.resolve(result.data);
      });
  }
}
