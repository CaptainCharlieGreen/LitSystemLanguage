const config = require('./config.json');
const getTransport = require('./invocations/transport');
const scope = config.scope;
const defaultFunction = config.defaultFunction;

const failures = [
  'componentRejection',
  'componentFailure',
  'serviceRejection',
  'serviceFailure'
];

module.exports = function (functionName) {
  const resolvedFunction = functionName || defaultFunction;

  if (typeof resolvedFunction !== 'string' || resolvedFunction.length === 0) {
    throw "Pass an absolute function name into Lit. Ex: Lit('Books-getBooks')";;
  }

  const resolution = scope[resolvedFunction];
  if (resolution === undefined) {
    throw `${resolvedFunction} is not defined in the current scope.`;
  }

  const transport = getTransport(
    resolution.service,
    resolution.config);
  
  if (functionName === undefined || functionName === defaultFunction) {
    return transport;
  }
  //todo: compose this
  return wrapTransport(resolvedFunction, transport);
}

function wrapTransport (functionName, transport) {
  return function (arg) {
    return transport({
        _litCallee: functionName,
        data: arg
      })
      .then(result => {
        const failure = failures
          .filter(failure => result[failure] !== undefined)
          .map(failure => result[failure])
          [0];

        return failure !== undefined
          ? Promise.reject(failure)
          : Promise.resolve(result.data);
      });
  }
}
